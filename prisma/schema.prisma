generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Appointment {
  id              String   @id
  patientId       String
  providerId      String?
  appointmentDate DateTime
  appointmentType String
  status          String   @default("scheduled")
  reason          String?  @db.Text
  diagnosis       String?  @db.Text
  treatmentPlan   String?  @db.Text
  notes           String?  @db.Text
  duration        Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, appointmentDate])
}

model FaceScan {
  id         String   @id
  userId     String
  scanData   Json
  imageUrl   String?
  confidence Float?
  deviceId   String?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model LabResult {
  id             String   @id
  patientId      String
  testName       String
  testCategory   String
  orderedBy      String?
  performedAt    DateTime
  resultValue    String?
  normalRange    String?
  unit           String?
  status         String
  interpretation String?  @db.Text
  reportUrl      String?
  notes          String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Patient        Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, performedAt])
}

model MedicalDocument {
  id           String   @id
  patientId    String
  documentType String
  title        String
  description  String?  @db.Text
  fileUrl      String
  fileSize     Int?
  uploadedBy   String?
  category     String?
  tags         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, documentType])
}

model Patient {
  id               String            @id
  userId           String
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           String
  phoneNumber      String?
  address          String?
  emergencyContact String?
  medicalHistory   String?           @db.Text
  allergies        String?           @db.Text
  medications      String?           @db.Text
  bloodType        String?
  height           Float?
  weight           Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  Appointment      Appointment[]
  LabResult        LabResult[]
  MedicalDocument  MedicalDocument[]
  User             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  Prescription     Prescription[]
  Vitals           Vitals[]

  @@index([userId])
}

model Prescription {
  id               String    @id
  patientId        String
  prescribedBy     String?
  medicationName   String
  dosage           String
  frequency        String
  duration         String
  instructions     String?   @db.Text
  startDate        DateTime
  endDate          DateTime?
  status           String    @default("active")
  refillsRemaining Int       @default(0)
  sideEffects      String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  Patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, status])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String?
  role          String        @default("user")
  emailVerified DateTime?
  image         String?
  apiToken      String?       @unique
  deviceId      String?
  lastLogin     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Account       Account[]
  FaceScan      FaceScan[]
  Patient       Patient[]
  Session       Session[]
  UserProfile   UserProfile?
  UserSettings  UserSettings?
}

model UserProfile {
  id               String    @id
  userId           String    @unique
  firstName        String?
  lastName         String?
  dateOfBirth      DateTime?
  gender           String?
  phoneNumber      String?
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  bio              String?   @db.Text
  occupation       String?
  company          String?
  website          String?
  socialLinks      Json?
  height           Float?
  weight           Float?
  bloodType        String?
  emergencyContact String?
  emergencyPhone   String?
  profilePicture   String?
  coverImage       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  User             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                   String    @id
  userId               String    @unique
  emailNotifications   Boolean   @default(true)
  pushNotifications    Boolean   @default(false)
  smsNotifications     Boolean   @default(false)
  newsletterSubscribed Boolean   @default(true)
  appointmentReminders Boolean   @default(true)
  medicationReminders  Boolean   @default(true)
  vitalReminders       Boolean   @default(true)
  labResultAlerts      Boolean   @default(true)
  theme                String    @default("light")
  language             String    @default("en")
  timezone             String    @default("UTC")
  dateFormat           String    @default("MM/DD/YYYY")
  timeFormat           String    @default("12h")
  unitSystem           String    @default("metric")
  temperatureUnit      String    @default("celsius")
  profileVisibility    String    @default("private")
  showEmail            Boolean   @default(false)
  showPhone            Boolean   @default(false)
  showLocation         Boolean   @default(false)
  dataRetentionDays    Int       @default(365)
  lastExportDate       DateTime?
  exportFormat         String    @default("json")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  User                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vitals {
  id                       String   @id
  patientId                String
  userId                   String?
  recordedBy               String?
  recordedAt               DateTime @default(now())
  source                   String   @default("manual")
  faceScanId               String?
  heartRate                Int?
  prq                      Float?
  oxygenSaturation         Int?
  bloodPressure            String?
  bloodPressureSystolic    Int?
  bloodPressureDiastolic   Int?
  breathingRate            Float?
  respiratoryRate          Int?
  temperature              Float?
  heartRateConfLevel       Int?
  breathingRateConfLevel   Int?
  prqConfLevel             Int?
  hrvSdnnConfLevel         Int?
  stressLevel              Float?
  recoveryAbility          String?
  stressResponse           String?
  respiration              Float?
  hrvSdnn                  Float?
  pnsIndex                 Float?
  snsIndex                 Float?
  sd2                      Float?
  sd1                      Float?
  rmssd                    Float?
  meanRri                  Float?
  lfHf                     Float?
  diabeticRisk             String?
  hypertensionRisk         String?
  highFastingGlucoseRisk   String?
  highTotalCholesterolRisk String?
  lowHemoglobinRisk        String?
  ascvdRisk                String?
  heartAge                 String?
  hemoglobin               Float?
  hba1c                    Float?
  bloodGlucose             Float?
  cholesterolTotal         Float?
  cholesterolLDL           Float?
  cholesterolHDL           Float?
  triglycerides            Float?
  bmi                      Float?
  painLevel                Int?
  stepsCount               Int?
  caloriesBurned           Float?
  sleepHours               Float?
  sleepQuality             String?
  notes                    String?  @db.Text
  symptoms                 String?  @db.Text
  name                     String?
  phoneNumber              String?
  Patient                  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, recordedAt])
}

model BriahScan {
  id                       String   @id @default(cuid())
  recordedBy               String?
  recordedAt               DateTime @default(now())
  source                   String   @default("manual")
  faceScanId               String?
  name                     String?
  phoneNumber              String?

  // Basic Vitals
  heartRate                Int?
  prq                      Float?
  oxygenSaturation         Int?
  bloodPressure            String?
  bloodPressureSystolic    Int?
  bloodPressureDiastolic   Int?
  breathingRate            Float?
  respiratoryRate          Int?
  temperature              Float?

  // Confidence Levels (0-3)
  heartRateConfLevel       Int?
  breathingRateConfLevel   Int?
  prqConfLevel             Int?
  hrvSdnnConfLevel         Int?

  // Stress & Recovery Metrics
  stressLevel              Float?
  recoveryAbility          String?
  stressResponse           String?
  respiration              Float?

  // HRV (Heart Rate Variability) Metrics
  hrvSdnn                  Float?
  pnsIndex                 Float?
  snsIndex                 Float?
  sd2                      Float?
  sd1                      Float?
  rmssd                    Float?
  meanRri                  Float?
  lfHf                     Float?

  // Risk Assessments
  diabeticRisk             String?
  hypertensionRisk         String?
  highFastingGlucoseRisk   String?
  highTotalCholesterolRisk String?
  lowHemoglobinRisk        String?
  ascvdRisk                String?
  heartAge                 String?

  // Blood Metrics
  hemoglobin               Float?
  hba1c                    Float?
  bloodGlucose             Float?

  // Additional Measurements
  cholesterolTotal         Float?
  cholesterolLDL           Float?
  cholesterolHDL           Float?
  triglycerides            Float?
  bmi                      Float?
  painLevel                Int?

  // Cardiovascular Metrics
  cardiacWorkload          Float?
  pulsePressure            Float?
  meanArterialPressure     Float?

  // Wellness & Risk Levels
  ASCVDRiskLevel           String?
  wellnessLevel            String?
  wellnessIndex            Float?

  // Activity & Sleep
  stepsCount               Int?
  caloriesBurned           Float?
  sleepHours               Float?
  sleepQuality             String?

  // Notes
  notes                    String?  @db.Text
  symptoms                 String?  @db.Text

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([recordedAt])
}
