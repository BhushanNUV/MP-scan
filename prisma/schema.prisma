// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String?
  role          String        @default("user") // user, admin, device
  emailVerified DateTime?
  image         String?
  apiToken      String?       @unique // For Android device authentication
  deviceId      String?       // Android device identifier
  lastLogin     DateTime?
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]
  profile       UserProfile?
  settings      UserSettings?
  faceScanData  FaceScan[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id                  String             @id @default(cuid())
  userId              String
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              String
  phoneNumber         String?
  address             String?
  emergencyContact    String?
  medicalHistory      String?            @db.Text
  allergies           String?            @db.Text
  medications         String?            @db.Text
  bloodType           String?
  height              Float?             // in cm
  weight              Float?             // in kg
  vitals              Vitals[]
  appointments        Appointment[]
  prescriptions       Prescription[]
  labResults          LabResult[]
  medicalDocuments    MedicalDocument[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model FaceScan {
  id                  String    @id @default(cuid())
  userId              String
  scanData            Json      // Store face scan metadata
  imageUrl            String?   // Optional face image URL
  confidence          Float?    // Confidence score
  deviceId            String?   // Android device ID
  createdAt           DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}

model Vitals {
  id                  String    @id @default(cuid())
  patientId           String
  userId              String?   // Direct user reference for device submissions
  recordedBy          String?   // Healthcare provider ID or device ID
  recordedAt          DateTime  @default(now())
  source              String    @default("manual") // manual, device, import
  faceScanId          String?   // Link to face scan if available
  
  // User Info fields
  name                String?   // User's name
  phoneNumber         String?   // User's phone number
  
  // Basic Vitals - Updated fields
  heartRate              Int?      // beats per minute
  prq                    Float?    // Pulse Rate Quality
  oxygenSaturation       Int?      // percentage (SpO2)
  bloodPressure          String?   // Combined BP value (e.g., "120/80")
  bloodPressureSystolic  Int?      // mmHg
  bloodPressureDiastolic Int?      // mmHg
  breathingRate          Float?    // breaths per minute
  respiratoryRate        Int?      // breaths per minute (legacy)
  temperature            Float?    // Celsius
  
  // Confidence Levels (0-3)
  heartRateConfLevel     Int?      // 0-3 confidence
  breathingRateConfLevel Int?      // 0-3 confidence
  prqConfLevel           Int?      // 0-3 confidence
  hrvSdnnConfLevel       Int?      // 0-3 confidence
  
  // Stress & Recovery Metrics
  stressLevel            Float?    
  recoveryAbility        String?   
  stressResponse         String?   
  respiration            Float?    
  
  // HRV (Heart Rate Variability) Metrics
  hrvSdnn                Float?    // Standard deviation of NN intervals
  pnsIndex               Float?    // Parasympathetic nervous system index
  snsIndex               Float?    // Sympathetic nervous system index
  sd2                    Float?    // Poincaré plot SD2
  sd1                    Float?    // Poincaré plot SD1
  rmssd                  Float?    // Root mean square of successive differences
  meanRri                Float?    // Mean RR interval
  lfHf                   Float?    // LF/HF ratio
  
  // Risk Assessments
  diabeticRisk           String?   
  hypertensionRisk       String?   
  highFastingGlucoseRisk String?   
  highTotalCholesterolRisk String? 
  lowHemoglobinRisk      String?   
  ascvdRisk              String?   // Atherosclerotic cardiovascular disease risk
  heartAge               String?   
  
  // Blood Metrics
  hemoglobin             Float?    // g/dL
  hba1c                  Float?    // Glycated hemoglobin percentage
  bloodGlucose           Float?    // mg/dL
  
  // Additional Measurements (preserved from original)
  cholesterolTotal       Float?    // mg/dL
  cholesterolLDL         Float?    // mg/dL
  cholesterolHDL         Float?    // mg/dL
  triglycerides          Float?    // mg/dL
  bmi                    Float?    // Body Mass Index
  painLevel              Int?      // 0-10 scale
  
  // Activity & Sleep
  stepsCount             Int?
  caloriesBurned         Float?
  sleepHours             Float?
  sleepQuality           String?   // Poor, Fair, Good, Excellent
  
  // Notes
  notes                  String?   @db.Text
  symptoms               String?   @db.Text
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId, recordedAt])
}

model Appointment {
  id              String    @id @default(cuid())
  patientId       String
  providerId      String?
  appointmentDate DateTime
  appointmentType String    // Consultation, Follow-up, Emergency, etc.
  status          String    @default("scheduled") // scheduled, completed, cancelled, no-show
  reason          String?   @db.Text
  diagnosis       String?   @db.Text
  treatmentPlan   String?   @db.Text
  notes           String?   @db.Text
  duration        Int?      // in minutes
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId, appointmentDate])
}

model Prescription {
  id                String    @id @default(cuid())
  patientId         String
  prescribedBy      String?   // Doctor ID
  medicationName    String
  dosage            String
  frequency         String    // e.g., "twice daily", "every 8 hours"
  duration          String    // e.g., "7 days", "1 month"
  instructions      String?   @db.Text
  startDate         DateTime
  endDate           DateTime?
  status            String    @default("active") // active, completed, cancelled
  refillsRemaining  Int       @default(0)
  sideEffects       String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId, status])
}

model LabResult {
  id            String    @id @default(cuid())
  patientId     String
  testName      String
  testCategory  String    // Blood Test, Urine Test, X-Ray, MRI, etc.
  orderedBy     String?   // Doctor ID
  performedAt   DateTime
  resultValue   String?
  normalRange   String?
  unit          String?   // mg/dL, mmol/L, etc.
  status        String    // Normal, Abnormal, Critical
  interpretation String?  @db.Text
  reportUrl     String?   // Link to full report
  notes         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId, performedAt])
}

model MedicalDocument {
  id           String    @id @default(cuid())
  patientId    String
  documentType String    // Report, Image, Certificate, etc.
  title        String
  description  String?   @db.Text
  fileUrl      String
  fileSize     Int?      // in bytes
  uploadedBy   String?   // User ID who uploaded
  category     String?   // Radiology, Pathology, Consultation, etc.
  tags         String?   // Comma-separated tags
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId, documentType])
}

model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  firstName       String?
  lastName        String?
  dateOfBirth     DateTime?
  gender          String?
  phoneNumber     String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  bio             String?   @db.Text
  occupation      String?
  company         String?
  website         String?
  socialLinks     Json?     // Store social media links as JSON
  height          Float?    // in cm by default
  weight          Float?    // in kg by default
  bloodType       String?
  emergencyContact String?
  emergencyPhone  String?
  profilePicture  String?   // URL to uploaded image
  coverImage      String?   // URL to cover image
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                    String    @id @default(cuid())
  userId                String    @unique
  
  // Notification Preferences
  emailNotifications    Boolean   @default(true)
  pushNotifications     Boolean   @default(false)
  smsNotifications      Boolean   @default(false)
  newsletterSubscribed  Boolean   @default(true)
  
  // Notification Types
  appointmentReminders  Boolean   @default(true)
  medicationReminders   Boolean   @default(true)
  vitalReminders        Boolean   @default(true)
  labResultAlerts       Boolean   @default(true)
  
  // Display Preferences
  theme                 String    @default("light") // light, dark, system
  language              String    @default("en")
  timezone              String    @default("UTC")
  dateFormat            String    @default("MM/DD/YYYY")
  timeFormat            String    @default("12h") // 12h or 24h
  
  // Unit Preferences
  unitSystem            String    @default("metric") // metric or imperial
  temperatureUnit       String    @default("celsius") // celsius or fahrenheit
  
  // Privacy Settings
  profileVisibility     String    @default("private") // public, private, friends
  showEmail             Boolean   @default(false)
  showPhone             Boolean   @default(false)
  showLocation          Boolean   @default(false)
  
  // Data & Export
  dataRetentionDays     Int       @default(365)
  lastExportDate        DateTime?
  exportFormat          String    @default("json") // json, csv, pdf
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
